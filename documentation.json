{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-435ed7b6cde1837c2ee1558b1277b77f",
            "file": "src/app/shared/store/app.state.ts",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector } from '@ngrx/store';\r\nimport * as AuthReducer from './auth/auth.reducer';\r\nimport * as ProductsReducer from './products/product.reducer';\r\n\r\n\r\nexport interface AppState {\r\n  authState: AuthReducer.AuthState;\r\n  productsState: ProductsReducer.ProductsState;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "authState",
                    "type": "AuthReducer.AuthState",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "productsState",
                    "type": "ProductsReducer.ProductsState",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AuthState",
            "id": "interface-AuthState-c175803374e09b5fcef1c61cff203cf9",
            "file": "src/app/shared/store/auth/auth.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\r\nimport * as AuthActions from './auth.actions';\r\nimport { User } from './user.model';\r\n\r\nexport interface AuthState {\r\n    currentUser: User\r\n}\r\nexport const initialState: AuthState = {\r\n  currentUser: {\r\n    accessToken: '',\r\n    email: '',\r\n    isLoggedIn: false\r\n  }\r\n};\r\n\r\nconst loginCompleteReducer = createReducer(\r\n  initialState,\r\n  on(AuthActions.loginSuccess, (state, payload:any) => {\r\n      return {\r\n          ...state,\r\n          currentUser: {\r\n            email: payload.email,\r\n            accessToken: payload.accessToken,\r\n            isLoggedIn: true\r\n          }\r\n      }\r\n  }),\r\n\r\n  on(AuthActions.logout, (state) => {\r\n    \r\n    return {\r\n        ...state,\r\n        currentUser: {\r\n          email: '',\r\n          accessToken: '',\r\n          isLoggedIn: false\r\n        }\r\n    }\r\n})\r\n);\r\n\r\n\r\n\r\nexport function reducer(state: AuthState | undefined, action: Action) {\r\n  return loginCompleteReducer(state, action);\r\n}",
            "properties": [
                {
                    "name": "currentUser",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CurrentUser",
            "id": "interface-CurrentUser-a7177f4d975577b673fd3eb0e129f755",
            "file": "src/app/shared/models/user.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    email: string;\r\n    password:string;\r\n}\r\nexport interface CurrentUser {\r\n    email: string;\r\n    accessToken: string;\r\n}",
            "properties": [
                {
                    "name": "accessToken",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Product",
            "id": "interface-Product-314d694f8767c753eed96efcf89d0fd1",
            "file": "src/app/shared/models/product.ts",
            "type": "interface",
            "sourceCode": "export interface Product {\r\n    name: string;\r\n    description: string;\r\n    imageUrl: string;\r\n    createdBy: number;\r\n    price: number;\r\n}\r\nexport interface ProductOperationInfo {\r\n    productOperation: string;\r\n    disableFormFields: boolean;\r\n}",
            "properties": [
                {
                    "name": "createdBy",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "imageUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "price",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ProductOperationInfo",
            "id": "interface-ProductOperationInfo-314d694f8767c753eed96efcf89d0fd1",
            "file": "src/app/shared/models/product.ts",
            "type": "interface",
            "sourceCode": "export interface Product {\r\n    name: string;\r\n    description: string;\r\n    imageUrl: string;\r\n    createdBy: number;\r\n    price: number;\r\n}\r\nexport interface ProductOperationInfo {\r\n    productOperation: string;\r\n    disableFormFields: boolean;\r\n}",
            "properties": [
                {
                    "name": "disableFormFields",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "productOperation",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ProductsState",
            "id": "interface-ProductsState-39207fc4615da57cb1b3d1fc81aa752e",
            "file": "src/app/shared/store/products/product.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\r\nimport { StoreProduct } from './products.model';\r\nimport * as ProductActions from '../products/product.actions';\r\nimport { state } from '@angular/animations';\r\n\r\nexport interface ProductsState {\r\n    products: StoreProduct[]\r\n}\r\nexport const initialState: ProductsState = {\r\n    products: []\r\n};\r\n\r\nconst productsReducer = createReducer(\r\n  initialState,\r\n  on(ProductActions.productAddSuccess, (state, payload:any) => {\r\n    return {\r\n        ...state,\r\n        products: [...state.products, payload ]\r\n    }\r\n}),\r\non(ProductActions.productFetchSuccess, (state, payload:any) => {\r\n  return {\r\n      ...state,\r\n      products: payload.data\r\n  }\r\n}),\r\non(ProductActions.productUpdateSuccess, (state, payload:any) => {\r\n  return {\r\n      ...state,\r\n      products: [...state.products, payload.data]\r\n  }\r\n}),\r\non(ProductActions.productDeleteSuccess, (state, payload:any) => {\r\n  const stateCopy = {...state};\r\n  const deleteId = payload.action.product.id;\r\n  const updatedProducts = state.products.filter((prod) =>  deleteId !== prod.id);\r\n  return {\r\n      ...state,\r\n      products: [...updatedProducts]\r\n  }\r\n}),\r\n);\r\n\r\n\r\n\r\nexport function reducer(state: ProductsState | undefined, action: Action) {\r\n  return productsReducer(state, action);\r\n}",
            "properties": [
                {
                    "name": "products",
                    "type": "StoreProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "StoreProduct",
            "id": "interface-StoreProduct-f634c20f3a138e89d4a68d0edd2711ee",
            "file": "src/app/shared/store/products/products.model.ts",
            "type": "interface",
            "sourceCode": "export interface StoreProduct {\r\n    name: string;\r\n    description: string;\r\n    imageUrl: string;\r\n    createdBy: string;\r\n    price: number;\r\n    id?: number;\r\n}",
            "properties": [
                {
                    "name": "createdBy",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "imageUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "price",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Theme",
            "id": "interface-Theme-5fe9d34f6657d5448cbe77c816b08304",
            "file": "src/app/shared/styles/themes/theme.ts",
            "type": "interface",
            "sourceCode": "export interface Theme {\r\n    name: string;\r\n    properties: any;\r\n  }\r\n  \r\n  export const light: Theme = {\r\n    name: \"light\",\r\n    properties: {\r\n        \"--header-background-color\": \"#cd0029\",\r\n        \"--body-background-color\": \"#fff\",\r\n        \"--footer-background-color\": \"#eaeaea\",\r\n        \"--footer-color\": \"#cd0029\",\r\n        \"--btn-background\": \"#fff\",\r\n        \"--btn-color\": \"#CC0028\",\r\n        \"--tab-active-background\": \"#cd0029\",\r\n        \"--tab-active-color\": \"#fff\",\r\n        \"--tab-wrapper-color\": \"#ec1313\",\r\n        \"--form-btn-background\": \"#cd0029\",\r\n        \"--form-btn-color\":\"#fff\"\r\n    }\r\n  };\r\n  \r\n  export const dark: Theme = {\r\n    name: \"dark\",\r\n    properties: {\r\n        \"--header-background-color\": \"#232323\",\r\n        \"--body-background-color\": \"#eaeaea\",\r\n        \"--footer-background-color\": \"#666666\",\r\n        \"--footer-color\": \"#fff\",\r\n        \"--btn-background\": \"#666666\",\r\n        \"--btn-color\": \"#fff\",\r\n        \"--tab-active-background\": \"#666666\",\r\n        \"--tab-active-color\": \"#fff\",\r\n        \"--tab-wrapper-color\": \"#666666\",\r\n        \"--form-btn-background\": \"#666666\",\r\n        \"--form-btn-color\":\"#fff\"\r\n    }\r\n  };",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "properties",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-a7177f4d975577b673fd3eb0e129f755",
            "file": "src/app/shared/models/user.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    email: string;\r\n    password:string;\r\n}\r\nexport interface CurrentUser {\r\n    email: string;\r\n    accessToken: string;\r\n}",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-28b17d7fc64eb1fea3134c21598932f7-1",
            "file": "src/app/shared/store/auth/user.model.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    accessToken: string;\r\n    email: string;\r\n    isLoggedIn: boolean;\r\n}",
            "properties": [
                {
                    "name": "accessToken",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "isLoggedIn",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        }
    ],
    "injectables": [
        {
            "name": "AppService",
            "id": "injectable-AppService-f6296f92e56073240f5c411ec3ff0822",
            "file": "src/app/shared/app.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 8
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\nexport class AppService {\r\n\r\n    isAuthenticated() {\r\n        if(sessionStorage.getItem('accessToken')) {\r\n            return true;\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n    \r\n}",
            "type": "injectable"
        },
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-3d467feb3eab2f400fa055b6bbd37568",
            "file": "src/app/shared/store/auth/auth.effects.ts",
            "properties": [
                {
                    "name": "login",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions.pipe(\r\n      ofType(AuthActions.LOGIN_ATTEMPT),\r\n      mergeMap((action: any) =>\r\n        this.authService.login(action).pipe(\r\n          map((data: any) => {\r\n            let email = action.email;\r\n            let accessToken = data.accessToken;\r\n            return {\r\n              type: AuthActions.LOGIN_SUCCESS,\r\n              email,\r\n              accessToken\r\n            };\r\n          }),\r\n          catchError((error) => of({ type: AuthActions.LOGIN_FAILURE }))\r\n        )\r\n      )\r\n    );\r\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "loginFailure",
                    "defaultValue": "createEffect(\r\n    () => {\r\n      return this.actions.pipe(\r\n        ofType(AuthActions.LOGIN_FAILURE),\r\n        tap((action) => {\r\n          this.toastrService.error('Couldnot login');\r\n          sessionStorage.clear();\r\n        })\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "loginSuccess",
                    "defaultValue": "createEffect(\r\n    () => {\r\n      return this.actions.pipe(\r\n        ofType(AuthActions.LOGIN_SUCCESS),\r\n        tap((action: any) => {\r\n          sessionStorage.setItem('accessToken', action.accessToken);\r\n          this.router.navigate(['products']);\r\n        })\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "logout",
                    "defaultValue": "createEffect(\r\n    () => {\r\n      return this.actions.pipe(\r\n        ofType(AuthActions.LOGOUT),\r\n        tap((action) => {\r\n          sessionStorage.clear();\r\n          this.router.navigate(['auth']);\r\n        })\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "signupAttempt",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions.pipe(\r\n      ofType(AuthActions.SIGNUP_ATTEMPT),\r\n      mergeMap((action: any) =>\r\n        this.authService.register(action).pipe(\r\n          map((data: any) => {\r\n            let email = action.email;\r\n            let accessToken = data.accessToken;\r\n            return {\r\n              type: AuthActions.SIGNUP_SUCCESS,\r\n              payload: { email, accessToken },\r\n            };\r\n          }),\r\n          catchError((error) => of({ type: AuthActions.SIGNUP_FAILURE }))\r\n        )\r\n      )\r\n    );\r\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "signupFailure",
                    "defaultValue": "createEffect(\r\n    () => {\r\n      return this.actions.pipe(\r\n        ofType(AuthActions.SIGNUP_FAILURE),\r\n        tap((action) => {\r\n          this.toastrService.error('Couldnot register');\r\n          sessionStorage.clear();\r\n        })\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "signupSuccess",
                    "defaultValue": "createEffect(\r\n    () => {\r\n      return this.actions.pipe(\r\n        ofType(AuthActions.SIGNUP_SUCCESS),\r\n        tap((action) => {\r\n          this.toastrService.success('Registered!');\r\n          this.router.navigate(['auth/login'])\r\n        })\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { EMPTY, Observable, of } from 'rxjs';\r\nimport { Actions, createEffect, Effect, ofType } from '@ngrx/effects';\r\nimport { Router } from '@angular/router';\r\nimport { catchError, mergeMap, map, tap } from 'rxjs/operators';\r\nimport { AuthenticationService } from '../../../auth/auth.service';\r\nimport * as AuthActions from './auth.actions';\r\nimport { ToastrService } from 'ngx-toastr';\r\n@Injectable()\r\nexport class AuthEffects {\r\n  constructor(\r\n    private actions: Actions,\r\n    private router: Router,\r\n    private authService: AuthenticationService,\r\n    private toastrService: ToastrService\r\n  ) {}\r\n\r\n  login = createEffect(() => {\r\n    return this.actions.pipe(\r\n      ofType(AuthActions.LOGIN_ATTEMPT),\r\n      mergeMap((action: any) =>\r\n        this.authService.login(action).pipe(\r\n          map((data: any) => {\r\n            let email = action.email;\r\n            let accessToken = data.accessToken;\r\n            return {\r\n              type: AuthActions.LOGIN_SUCCESS,\r\n              email,\r\n              accessToken\r\n            };\r\n          }),\r\n          catchError((error) => of({ type: AuthActions.LOGIN_FAILURE }))\r\n        )\r\n      )\r\n    );\r\n  });\r\n\r\n  loginSuccess = createEffect(\r\n    () => {\r\n      return this.actions.pipe(\r\n        ofType(AuthActions.LOGIN_SUCCESS),\r\n        tap((action: any) => {\r\n          sessionStorage.setItem('accessToken', action.accessToken);\r\n          this.router.navigate(['products']);\r\n        })\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  );\r\n\r\n  loginFailure = createEffect(\r\n    () => {\r\n      return this.actions.pipe(\r\n        ofType(AuthActions.LOGIN_FAILURE),\r\n        tap((action) => {\r\n          this.toastrService.error('Couldnot login');\r\n          sessionStorage.clear();\r\n        })\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  );\r\n\r\n  logout = createEffect(\r\n    () => {\r\n      return this.actions.pipe(\r\n        ofType(AuthActions.LOGOUT),\r\n        tap((action) => {\r\n          sessionStorage.clear();\r\n          this.router.navigate(['auth']);\r\n        })\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  );\r\n\r\n  signupAttempt = createEffect(() => {\r\n    return this.actions.pipe(\r\n      ofType(AuthActions.SIGNUP_ATTEMPT),\r\n      mergeMap((action: any) =>\r\n        this.authService.register(action).pipe(\r\n          map((data: any) => {\r\n            let email = action.email;\r\n            let accessToken = data.accessToken;\r\n            return {\r\n              type: AuthActions.SIGNUP_SUCCESS,\r\n              payload: { email, accessToken },\r\n            };\r\n          }),\r\n          catchError((error) => of({ type: AuthActions.SIGNUP_FAILURE }))\r\n        )\r\n      )\r\n    );\r\n  });\r\n\r\n  signupSuccess = createEffect(\r\n    () => {\r\n      return this.actions.pipe(\r\n        ofType(AuthActions.SIGNUP_SUCCESS),\r\n        tap((action) => {\r\n          this.toastrService.success('Registered!');\r\n          this.router.navigate(['auth/login'])\r\n        })\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  );\r\n\r\n  signupFailure = createEffect(\r\n    () => {\r\n      return this.actions.pipe(\r\n        ofType(AuthActions.SIGNUP_FAILURE),\r\n        tap((action) => {\r\n          this.toastrService.error('Couldnot register');\r\n          sessionStorage.clear();\r\n        })\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "authService",
                        "type": "AuthenticationService"
                    },
                    {
                        "name": "toastrService",
                        "type": "ToastrService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastrService",
                        "type": "ToastrService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthenticationService",
            "id": "injectable-AuthenticationService-9c8061d4ffda87ea6971c2d828bb1c02",
            "file": "src/app/auth/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "userBody",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "userBody",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { User } from '../shared/models/user';\r\nimport * as URL_CONSTANTS from '../shared/urls';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class AuthenticationService {\r\n    constructor(private httpService: HttpClient) {}\r\n\r\n    register(user:User) {\r\n      let {email, password} = user;\r\n       return this.httpService.post(URL_CONSTANTS.HOST + URL_CONSTANTS.REGISTER, {email, password});\r\n    }\r\n\r\n    login(userBody) {\r\n      return this.httpService.post(URL_CONSTANTS.HOST + URL_CONSTANTS.LOGIN, userBody);\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "HttpClient"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductEffects",
            "id": "injectable-ProductEffects-8a1d69dc04faed400ce743efd2cc889e",
            "file": "src/app/shared/store/products/product.effects.ts",
            "properties": [
                {
                    "name": "productAddAttempt",
                    "defaultValue": "createEffect(() => {\r\n            return this.actions.pipe(\r\n                 ofType(ProductActions.PRODUCT_ADD_ATTEMPT),\r\n                 mergeMap((action:any) => this.productsService.addProduct(action.product)\r\n                     .pipe(\r\n                         map((data:any) => {\r\n                           return { type: ProductActions.PRODUCT_ADD_SUCCESS, payload: {data} }\r\n                         }),\r\n                         catchError((error) => ( of({type: ProductActions.PRODUCT_ADD_FAILURE})) )\r\n                     )\r\n                )\r\n             )\r\n         })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "productAddSuccess",
                    "defaultValue": "createEffect(() => {\r\n            return this.actions.pipe(\r\n                ofType(ProductActions.productAddSuccess),\r\n                tap((action:any) => {\r\n                   this.toastrService.success('Added!');\r\n                   this.router.navigate(['products']);\r\n                }\r\n               )\r\n            )\r\n         }, {dispatch: false})",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "productsDeleteAttempt",
                    "defaultValue": "createEffect(() => {\r\n            return this.actions.pipe(\r\n                 ofType(ProductActions.PRODUCT_DELETE_ATTEMPT),\r\n                 mergeMap((action:any) => this.productsService.deleteProduct(action.product)\r\n                     .pipe(\r\n                         map((data:any) => {  \r\n                           return { type: ProductActions.PRODUCT_DELETE_SUCCESS, action }\r\n                         }),\r\n                         catchError((error) => ( of({type: ProductActions.PRODUCT_DELETE_FAILURE})) )\r\n                     )\r\n                )\r\n             )\r\n         })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "productsDeleteFailure",
                    "defaultValue": "createEffect(() => {\r\n            return this.actions.pipe(\r\n                ofType(ProductActions.PRODUCT_DELETE_FAILURE),\r\n                tap((action:any) => {\r\n                   this.toastrService.error('Couldnot delete ptoduct');\r\n                }\r\n               )\r\n            )\r\n         }, {dispatch: false})",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "productsDeleteSuccess",
                    "defaultValue": "createEffect(() => {\r\n            return this.actions.pipe(\r\n                ofType(ProductActions.PRODUCT_DELETE_SUCCESS),\r\n                     map((data:any) => {\r\n                        return { type: ProductActions.PRODUCT_DELETE_SUCCESS, payload: {data} }\r\n                        }),\r\n                     catchError((error) => ( of({type: ProductActions.PRODUCT_DELETE_FAILURE})) )\r\n            )\r\n         }, {dispatch: false})",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "productsFetchAttempt",
                    "defaultValue": "createEffect(() => {\r\n            return this.actions.pipe(\r\n                 ofType(ProductActions.PRODUCT_FETCH_ATTEMPT),\r\n                 mergeMap((action:any) => this.productsService.getAllProducts()\r\n                     .pipe(\r\n                         map((data:any) => {\r\n                           return { type: ProductActions.PRODUCT_FETCH_SUCCESS, data }\r\n                         }),\r\n                         catchError((error) => ( of({type: ProductActions.PRODUCT_ADD_FAILURE})) )\r\n                     )\r\n                )\r\n             )\r\n         })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "productsUpdateAttempt",
                    "defaultValue": "createEffect(() => {\r\n            return this.actions.pipe(\r\n                 ofType(ProductActions.PRODUCT_UPDATE_ATTEMPT),\r\n                 mergeMap((action:any) => this.productsService.updateProduct(action.product)\r\n                     .pipe(\r\n                         map((data:any) => {\r\n                           return { type: ProductActions.PRODUCT_UPDATE_SUCCESS, data }\r\n                         }),\r\n                         catchError((error) => ( of({type: ProductActions.PRODUCT_UPDATE_FAILURE})) )\r\n                     )\r\n                )\r\n             )\r\n         })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "productsUpdateFailure",
                    "defaultValue": "createEffect(() => {\r\n            return this.actions.pipe(\r\n                ofType(ProductActions.PRODUCT_UPDATE_FAILURE),\r\n                tap((action:any) => {\r\n                  this.toastrService.error('Couldnot update product');\r\n                   this.router.navigate(['products']);\r\n                }\r\n               )\r\n            )\r\n         }, {dispatch: false})",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "productsUpdateSuccess",
                    "defaultValue": "createEffect(() => {\r\n            return this.actions.pipe(\r\n                ofType(ProductActions.PRODUCT_UPDATE_SUCCESS),\r\n                tap((action:any) => {\r\n                  this.toastrService.success('Updated!');\r\n                   this.router.navigate(['products']);\r\n                }\r\n               )\r\n            )\r\n         }, {dispatch: false})",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { of } from 'rxjs';\r\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\r\nimport { Router } from '@angular/router';\r\nimport { catchError, mergeMap, map, tap } from 'rxjs/operators';\r\nimport * as ProductActions from './product.actions';\r\nimport { ProductService } from '../../../products/products.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\n@Injectable()\r\nexport class ProductEffects {\r\n\r\n    constructor(\r\n        private actions: Actions,\r\n        private router: Router,\r\n        private productsService: ProductService,\r\n        private toastrService: ToastrService\r\n        ) {\r\n        }\r\n  \r\n        productAddAttempt = createEffect(() => {\r\n            return this.actions.pipe(\r\n                 ofType(ProductActions.PRODUCT_ADD_ATTEMPT),\r\n                 mergeMap((action:any) => this.productsService.addProduct(action.product)\r\n                     .pipe(\r\n                         map((data:any) => {\r\n                           return { type: ProductActions.PRODUCT_ADD_SUCCESS, payload: {data} }\r\n                         }),\r\n                         catchError((error) => ( of({type: ProductActions.PRODUCT_ADD_FAILURE})) )\r\n                     )\r\n                )\r\n             )\r\n         })\r\n\r\n         productAddSuccess = createEffect(() => {\r\n            return this.actions.pipe(\r\n                ofType(ProductActions.productAddSuccess),\r\n                tap((action:any) => {\r\n                   this.toastrService.success('Added!');\r\n                   this.router.navigate(['products']);\r\n                }\r\n               )\r\n            )\r\n         }, {dispatch: false})\r\n\r\n         productsFetchAttempt = createEffect(() => {\r\n            return this.actions.pipe(\r\n                 ofType(ProductActions.PRODUCT_FETCH_ATTEMPT),\r\n                 mergeMap((action:any) => this.productsService.getAllProducts()\r\n                     .pipe(\r\n                         map((data:any) => {\r\n                           return { type: ProductActions.PRODUCT_FETCH_SUCCESS, data }\r\n                         }),\r\n                         catchError((error) => ( of({type: ProductActions.PRODUCT_ADD_FAILURE})) )\r\n                     )\r\n                )\r\n             )\r\n         })\r\n\r\n         productsUpdateAttempt = createEffect(() => {\r\n            return this.actions.pipe(\r\n                 ofType(ProductActions.PRODUCT_UPDATE_ATTEMPT),\r\n                 mergeMap((action:any) => this.productsService.updateProduct(action.product)\r\n                     .pipe(\r\n                         map((data:any) => {\r\n                           return { type: ProductActions.PRODUCT_UPDATE_SUCCESS, data }\r\n                         }),\r\n                         catchError((error) => ( of({type: ProductActions.PRODUCT_UPDATE_FAILURE})) )\r\n                     )\r\n                )\r\n             )\r\n         })\r\n\r\n         productsUpdateSuccess = createEffect(() => {\r\n            return this.actions.pipe(\r\n                ofType(ProductActions.PRODUCT_UPDATE_SUCCESS),\r\n                tap((action:any) => {\r\n                  this.toastrService.success('Updated!');\r\n                   this.router.navigate(['products']);\r\n                }\r\n               )\r\n            )\r\n         }, {dispatch: false})\r\n\r\n         productsUpdateFailure = createEffect(() => {\r\n            return this.actions.pipe(\r\n                ofType(ProductActions.PRODUCT_UPDATE_FAILURE),\r\n                tap((action:any) => {\r\n                  this.toastrService.error('Couldnot update product');\r\n                   this.router.navigate(['products']);\r\n                }\r\n               )\r\n            )\r\n         }, {dispatch: false})\r\n\r\n\r\n         productsDeleteAttempt = createEffect(() => {\r\n            return this.actions.pipe(\r\n                 ofType(ProductActions.PRODUCT_DELETE_ATTEMPT),\r\n                 mergeMap((action:any) => this.productsService.deleteProduct(action.product)\r\n                     .pipe(\r\n                         map((data:any) => {  \r\n                           return { type: ProductActions.PRODUCT_DELETE_SUCCESS, action }\r\n                         }),\r\n                         catchError((error) => ( of({type: ProductActions.PRODUCT_DELETE_FAILURE})) )\r\n                     )\r\n                )\r\n             )\r\n         })\r\n\r\n         productsDeleteSuccess = createEffect(() => {\r\n            return this.actions.pipe(\r\n                ofType(ProductActions.PRODUCT_DELETE_SUCCESS),\r\n                     map((data:any) => {\r\n                        return { type: ProductActions.PRODUCT_DELETE_SUCCESS, payload: {data} }\r\n                        }),\r\n                     catchError((error) => ( of({type: ProductActions.PRODUCT_DELETE_FAILURE})) )\r\n            )\r\n         }, {dispatch: false})\r\n\r\n         productsDeleteFailure = createEffect(() => {\r\n            return this.actions.pipe(\r\n                ofType(ProductActions.PRODUCT_DELETE_FAILURE),\r\n                tap((action:any) => {\r\n                   this.toastrService.error('Couldnot delete ptoduct');\r\n                }\r\n               )\r\n            )\r\n         }, {dispatch: false})\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "productsService",
                        "type": "ProductService"
                    },
                    {
                        "name": "toastrService",
                        "type": "ToastrService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productsService",
                        "type": "ProductService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastrService",
                        "type": "ToastrService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductService",
            "id": "injectable-ProductService-aaead9f6ed913e2e641876e754a4fe8d",
            "file": "src/app/products/products.service.ts",
            "properties": [
                {
                    "name": "productOperationInfo",
                    "defaultValue": "{\r\n    productOperation: APP_CONSTANTS.PRODUCT_ADD,\r\n    disableFormFields: false,\r\n  }",
                    "type": "ProductOperationInfo",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "selectedProduct",
                    "type": "StoreProduct",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "addProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "StoreProduct"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "StoreProduct",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "StoreProduct"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "StoreProduct",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "getProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "getProductInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "setProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "StoreProduct"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "StoreProduct",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setProductInfo",
                    "args": [
                        {
                            "name": "operation",
                            "type": "ProductOperationInfo"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "operation",
                            "type": "ProductOperationInfo",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "StoreProduct"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "StoreProduct",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport * as URL_CONSTANTS from '../shared/urls';\r\nimport * as APP_CONSTANTS from '../shared/app.constants';\r\nimport { StoreProduct } from '../shared/store/products/products.model';\r\nimport { ProductOperationInfo } from '../shared/models/product';\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProductService {\r\n  selectedProduct: StoreProduct;\r\n  constructor(private httpService: HttpClient) {}\r\n  private productOperationInfo: ProductOperationInfo = {\r\n    productOperation: APP_CONSTANTS.PRODUCT_ADD,\r\n    disableFormFields: false,\r\n  };\r\n\r\n  getAllProducts() {\r\n    return this.httpService.get(URL_CONSTANTS.HOST + URL_CONSTANTS.PRODUCTS);\r\n  }\r\n\r\n  getProductInfo() {\r\n    return this.productOperationInfo;\r\n  }\r\n  setProductInfo(operation: ProductOperationInfo) {\r\n    this.productOperationInfo = operation;\r\n  }\r\n\r\n  addProduct(product: StoreProduct) {\r\n    return this.httpService.post(\r\n      URL_CONSTANTS.HOST + URL_CONSTANTS.PRODUCTS,\r\n      product\r\n    );\r\n  }\r\n\r\n  updateProduct(product: StoreProduct) {\r\n    return this.httpService.put(\r\n      URL_CONSTANTS.HOST + URL_CONSTANTS.PRODUCTS + '/' + product.id,\r\n      product\r\n    );\r\n  }\r\n\r\n  deleteProduct(product: StoreProduct) {\r\n    return this.httpService.delete(\r\n      URL_CONSTANTS.HOST + URL_CONSTANTS.PRODUCTS + '/' + product.id\r\n    );\r\n  }\r\n\r\n  setProduct(product: StoreProduct) {\r\n    this.selectedProduct = product;\r\n  }\r\n  \r\n  getProduct() {\r\n    return this.selectedProduct;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-3eea4c4eab2aa083280e8148937126d9",
            "file": "src/app/shared/theme.service.ts",
            "properties": [
                {
                    "name": "active",
                    "defaultValue": "light",
                    "type": "Theme",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "availableThemes",
                    "defaultValue": "[light, dark]",
                    "type": "Theme[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "isDarkTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 9
                },
                {
                    "name": "setActiveTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "Theme"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "Theme",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDarkTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                },
                {
                    "name": "setLightTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "description": "",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { Theme, light, dark } from './styles/themes/theme';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class ThemeService {\r\n  private active: Theme = light;\r\n  private availableThemes: Theme[] = [light, dark];\r\n\r\n  isDarkTheme(): boolean {\r\n    return this.active.name === dark.name;\r\n  }\r\n\r\n  setDarkTheme(): void {\r\n    this.setActiveTheme(dark);\r\n  }\r\n\r\n  setLightTheme(): void {\r\n    this.setActiveTheme(light);\r\n  }\r\n\r\n  setActiveTheme(theme: Theme): void {\r\n    this.active = theme;\r\n    Object.keys(this.active.properties).forEach(property => {\r\n      document.documentElement.style.setProperty(\r\n        property,\r\n        this.active.properties[property]\r\n      );\r\n    });\r\n  }\r\n\r\n}",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppMocks",
            "id": "class-AppMocks-cd8b6ec59525c57769f85bc138427ea5",
            "file": "src/app/shared/mocks/mocks.ts",
            "type": "class",
            "sourceCode": "import { FormBuilder } from '@angular/forms'\r\nimport { of } from 'rxjs'\r\nimport * as APP_CONSTANTS from '../app.constants';\r\nexport class AppMocks {\r\n     public static getThemeServiceMock = () => {\r\n        return {\r\n            isDarkTheme: jest.fn(() => false),\r\n            setDarkTheme: jest.fn(() => {}),\r\n            setLightTheme: jest.fn(() => {}),\r\n            setActiveTheme: jest.fn(() => {})\r\n         }\r\n        \r\n     }\r\n\r\n     public static getMockProductService = () => {\r\n        return {\r\n            getAllProducts: jest.fn(() => false),\r\n            getProductInfo: jest.fn(() => {\r\n                return {\r\n                    productOperation: APP_CONSTANTS.PRODUCT_ADD,\r\n                    disableFormFields: false,\r\n                  };\r\n            }),\r\n            setProductInfo: jest.fn(() => {}),\r\n            addProduct: jest.fn(() => {}),\r\n            setProduct: jest.fn((val) => {}),\r\n            getProduct: jest.fn((val) => {\r\n                return  {\r\n                name: '',\r\n                description: '',\r\n                imageUrl: '',\r\n                createdBy: '',\r\n                price: 10,\r\n                id: 1\r\n            }\r\n            })\r\n         }\r\n     }\r\n\r\n     public static getMockRouterService = () => {\r\n        return {\r\n            navigate: jest.fn((nav) => {})\r\n           }\r\n     }\r\n\r\n     public static getMockStoreService = () => {\r\n        return {\r\n                dispatch: jest.fn(() => {}),\r\n                pipe: jest.fn(() => of({}))\r\n           }\r\n     }\r\n\r\n     public static getMockAppService = () => {\r\n        return {\r\n            isAuthenticated: jest.fn(() => {})\r\n           }\r\n    }\r\n\r\n    public static getMockFormGroup = () => {\r\n        const myModel = {\r\n            valid: true,\r\n            value: null\r\n         };\r\n         const fb = new FormBuilder();\r\n         return fb.group(myModel);\r\n    }\r\n\r\n    public static getMockHttpService = () => {\r\n        return {\r\n            get: jest.fn(() => {}),\r\n            put: jest.fn(() => {}),\r\n            post: jest.fn((val) => {}),\r\n            delete: jest.fn(() => {})\r\n           }\r\n    }\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "getMockAppService",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "getMockFormGroup",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "getMockHttpService",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "getMockProductService",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "getMockRouterService",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "getMockStoreService",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "getThemeServiceMock",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        115
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-b0dda38f970a6690b77b35dfb293b3ac",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl) as Promise<unknown>;\r\n  }\r\n\r\n  getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "storeButton",
            "id": "class-storeButton-b154016fb6d7fff129ad6277a08814b3",
            "file": "src/components/button.ts",
            "type": "class",
            "sourceCode": "import { html, LitElement, css } from 'lit-element';\r\nimport { customElement, property  } from 'lit-element/lib/decorators';\r\n\r\n@customElement('str-btn')\r\nexport class storeButton extends LitElement {\r\n\r\n  @property()\r\n  buttonText = 'click here';\r\n\r\n  static get styles() {\r\n    return css`\r\n    .str-btn {\r\n      padding: 8px;\r\n      border: 1px solid #c8c8c8;\r\n      box-shadow: .5px .5px #c8c8c8;\r\n      margin: 1rem;\r\n      background-color: var(--btn-background);\r\n    color: var(--btn-color);\r\n  }\r\n  str-btn.active { \r\n    transform: scale(0.98); \r\n    /* Scaling button to 0.98 to its original size */ \r\n    -webkit-box-shadow: -1px -1px 5px -1px rgba(0,0,0,0.75);\r\n    -moz-box-shadow: -1px -1px 5px -1px rgba(0,0,0,0.75);\r\n    box-shadow: -1px -1px 5px -1px rgba(0,0,0,0.75);\r\n} \r\n    `;\r\n  }\r\n\r\n\r\n  render(){\r\n    return html`<button type=\"button\" class=\"str-btn\">${this.buttonText}</button>`;\r\n  }\r\n}",
            "properties": [
                {
                    "name": "buttonText",
                    "defaultValue": "'click here'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "property",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement",
            "accessors": {
                "styles": {
                    "name": "styles",
                    "getSignature": {
                        "name": "styles",
                        "type": "",
                        "returnType": "",
                        "line": 10
                    }
                }
            }
        },
        {
            "name": "storeFormButton",
            "id": "class-storeFormButton-006f059c017fb7b2c6fe2f2fad4966f4",
            "file": "src/components/form-button.ts",
            "type": "class",
            "sourceCode": "import { html, LitElement, css } from 'lit-element';\r\nimport { customElement, property  } from 'lit-element/lib/decorators';\r\n\r\n@customElement('str-form-btn')\r\nexport class storeFormButton extends LitElement {\r\n\r\n  @property()\r\n  buttonText = 'click here';\r\n\r\n  @property()\r\n  isCardButton = false;\r\n\r\n\r\n  static get styles() {\r\n    return css`\r\n    .str-btn {\r\n      padding: 8px;\r\n      border: 1px solid #c8c8c8;\r\n      box-shadow: .5px .5px #c8c8c8;\r\n      margin: 1rem;\r\n      background-color: var(--btn-background);\r\n    color: var(--btn-color);\r\n  }\r\n  .str-btn.active { \r\n    transform: scale(0.98); \r\n    /* Scaling button to 0.98 to its original size */ \r\n    -webkit-box-shadow: -1px -1px 5px -1px rgba(0,0,0,0.75);\r\n    -moz-box-shadow: -1px -1px 5px -1px rgba(0,0,0,0.75);\r\n    box-shadow: -1px -1px 5px -1px rgba(0,0,0,0.75);\r\n} \r\n  .str-submit-btn {\r\n    width:8rem;\r\n    background-color: var(--form-btn-background);\r\n    color: var(--form-btn-color);\r\n}\r\n.str-card-buttons {\r\n  width:6rem;\r\n  background-color: var(--form-btn-background);\r\n  color: var(--form-btn-color);\r\n  margin: 10px;\r\n}\r\n    `;\r\n  }\r\n\r\n\r\n  render(){\r\n    if(this.isCardButton) {\r\n      return html`<button class=\"str-card-buttons str-btn\">${this.buttonText}</button>`;\r\n    } else {\r\n      return html`<button class=\"str-submit-btn str-btn\">${this.buttonText}</button>`;\r\n    }\r\n  }\r\n}",
            "properties": [
                {
                    "name": "buttonText",
                    "defaultValue": "'click here'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "property",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "isCardButton",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "property",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement",
            "accessors": {
                "styles": {
                    "name": "styles",
                    "getSignature": {
                        "name": "styles",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                }
            }
        },
        {
            "name": "StorybookMocks",
            "id": "class-StorybookMocks-4c86e30dbfa8ca27d0c028632977415a",
            "file": "src/stories/mocks.ts",
            "type": "class",
            "sourceCode": "import * as APP_CONSTANTS from '../app/shared/app.constants';\r\nexport class StorybookMocks {\r\n  public static getstoreMock = () => {\r\n    return {\r\n      dispatch: () => {},\r\n      pipe: () => {},\r\n    };\r\n  };\r\n\r\n  public static getrouterMock = () => {\r\n    return {\r\n      navigate: () => {},\r\n    };\r\n  };\r\n\r\n  public static getProductServiceMock = () => {\r\n    return {\r\n        getAllProducts: jest.fn(() => false),\r\n        getProductInfo: jest.fn(() => {\r\n            return {\r\n                productOperation: APP_CONSTANTS.PRODUCT_ADD,\r\n                disableFormFields: false,\r\n              };\r\n        }),\r\n        setProductInfo: jest.fn(() => {}),\r\n        addProduct: jest.fn(() => {}),\r\n        setProduct: jest.fn((val) => {}),\r\n        getProduct: jest.fn((val) => {\r\n            return  {\r\n            name: '',\r\n            description: '',\r\n            imageUrl: '',\r\n            createdBy: '',\r\n            price: 10,\r\n            id: 1\r\n        }\r\n        })\r\n     }\r\n }\r\n}\r\n",
            "properties": [
                {
                    "name": "getProductServiceMock",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "getrouterMock",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "getstoreMock",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        115
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-01fb342fcca19827f4693a8dee3034ce",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n// import { storeButton } from './lit-elements/button';\r\n\r\n// console.assert(storeButton !== undefined);\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent{\r\n\r\n  }\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".str-body {\r\n    background-color: var(--body-background-color);\r\n}\r\n// .str-header {\r\n//     display: flex;\r\n// }",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-header class=\"str-header\"></app-header>\r\n    <main class=\"str-body\">\r\n        <router-outlet></router-outlet>\r\n    </main>\r\n<app-footer></app-footer>"
        },
        {
            "name": "AuthComponent",
            "id": "component-AuthComponent-4dce8d285507006ecb9cf8922023a680",
            "file": "src/app/auth/auth.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth",
            "styleUrls": [
                "./auth.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./auth.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.component.html',\r\n  styleUrls: ['./auth.component.scss']\r\n})\r\nexport class AuthComponent{\r\n  constructor() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../shared/styles/variables.scss';\r\n.auth-container{\r\n    width: 50%;\r\n    margin: 3rem auto 0rem auto;\r\n    border: 1px solid $border-color;\r\n    border-radius: 5px;\r\n}\r\n\r\n@import '../shared/styles/media-queries.scss';",
                    "styleUrl": "./auth.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"auth-container\">\r\n  <div class=\"text-center\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-9ca7fb996418afe6972dd7fc05f0780e",
            "file": "src/stories/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-card",
            "styleUrls": [
                "../app/products/card/card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "../app/products/card/card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-card',\r\n  templateUrl: '../app/products/card/card.component.html' ,\r\n  styleUrls: ['../app/products/card/card.component.scss'],\r\n})\r\nexport default class CardComponent {\r\n \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../shared/styles/variables.scss';\r\n.card {\r\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\r\n    transition: 0.3s;\r\n    border-radius: 5px;\r\n    background-color: $white;\r\n    height:100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    border:none;\r\n    width:100%;\r\n  }\r\n  \r\n  .card:hover {\r\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\r\n  }\r\n  \r\n  .product-image {\r\n    border-radius: 5px 5px 0 0;\r\n  }\r\n  \r\n  .container {\r\n    padding: 2px 16px;\r\n  }\r\n  .card-font-small {\r\n      font-size: 0.8rem;\r\n  }\r\n  .card-font-medium {\r\n      font-size: 0.9rem;\r\n  }\r\n  .card-header-margin {\r\n    margin: 0.8rem;\r\n}\r\n.card-details-margin {\r\n    margin: 0.5rem;\r\n}\r\n.str-card-buttons {\r\n  width:6rem;\r\n  background-color: var(--form-btn-background);\r\n  color: var(--form-btn-color);\r\n  margin: 10px;\r\n}\r\n",
                    "styleUrl": "../app/products/card/card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button class=\"card\" (click)=\"viewProduct()\" aria-label=\"View product details\" >\r\n    <!-- tabindex=\"0\" role=\"button\" (keydown)=\"viewProduct()\" -->\r\n    <div class=\"text-center\">\r\n        <img [src]=\"product.imageUrl\" class=\"product-image\" alt=\"Avatar\" onerror=\"this.src='../../../assets/images/noimage.webp';\" width=\"200\" width=\"200\" height=\"200\">\r\n    </div>\r\n    <div class=\"container card-details\">\r\n        <h4 class=\"text-center card-font-medium card-header-margin\"><b>{{product.name}}</b></h4>\r\n        <p class=\"text-center card-font-small card-details-margin\">{{product.description}}</p>\r\n        <p class=\"text-center card-font-small card-details-margin\"><b><span>&#8377; </span> {{product.price}}</b></p>\r\n    </div>\r\n    <div class=\"text-center str-card-buttons-container\">\r\n        <str-form-btn *ngIf=\"currentUser === product.createdBy\" (click)=\"updateProduct($event)\" buttonText=\"{{'products.card.update-button'| translate}}\" isCardButton=\"true\" aria-label=\"Update Product\"></str-form-btn>\r\n        <str-form-btn *ngIf=\"currentUser === product.createdBy\" (click)=\"deleteProduct($event)\" buttonText=\"{{'products.card.delete-button'| translate}}\" isCardButton=\"true\" aria-label=\"Delete Product\"></str-form-btn>\r\n    </div>\r\n</button>"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-8848cc5fd9a5b07fea070f1a7d8bc5e7-1",
            "file": "src/app/products/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "product",
                    "line": 19,
                    "type": "StoreProduct"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentUser",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "evt",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "updateProduct",
                    "args": [
                        {
                            "name": "evt",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "viewProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ProductOperationInfo } from '../../shared/models/product';\r\nimport { ProductService } from '../products.service';\r\nimport * as APP_CONSTANTS from '../../shared/app.constants';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport * as ProductActions from '../../shared/store/products/product.actions';\r\nimport { map } from 'rxjs/operators';\r\nimport { CurrentUser } from '../../shared/models/user';\r\nimport { StoreProduct } from '../../shared/store/products/products.model';\r\nimport { AppState } from '../../shared/store/app.state';\r\n@Component({\r\n  selector: 'app-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.component.scss']\r\n})\r\nexport class CardComponent implements OnInit {\r\n\r\n  @Input() product: StoreProduct;\r\n  currentUser: string = '';\r\n  constructor(\r\n    private productService:ProductService,\r\n    private router: Router,\r\n    private store: Store<AppState>) { }\r\n\r\n  ngOnInit(): void {\r\n     this.store.pipe(\r\n      map((state) => state['auth'].currentUser))\r\n     .subscribe((user:CurrentUser) => {\r\n      this.currentUser = user.email;\r\n    })\r\n  }\r\n\r\n  updateProduct(evt) {\r\n    evt.stopPropagation();\r\n    let productOpInfo: ProductOperationInfo = {\r\n      productOperation: APP_CONSTANTS.PRODUCT_UPDATE,\r\n      disableFormFields: false\r\n    }\r\n    this.productService.setProductInfo(productOpInfo);\r\n    this.productService.setProduct(this.product);\r\n    this.router.navigate(['products/product-update']);\r\n  }\r\n  deleteProduct(evt) {\r\n    evt.stopPropagation();\r\n    const product = this.product;\r\n    this.store.dispatch(ProductActions.productDeleteAttempt({product}))\r\n  }\r\n  viewProduct() {\r\n    let productOpInfo: ProductOperationInfo = {\r\n      productOperation: APP_CONSTANTS.PRODUCT_VIEW,\r\n      disableFormFields: true\r\n    }\r\n    this.productService.setProductInfo(productOpInfo);\r\n    this.productService.setProduct(this.product);\r\n    this.router.navigate(['products/product-update']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../shared/styles/variables.scss';\r\n.card {\r\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\r\n    transition: 0.3s;\r\n    border-radius: 5px;\r\n    background-color: $white;\r\n    height:100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    border:none;\r\n    width:100%;\r\n  }\r\n  \r\n  .card:hover {\r\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\r\n  }\r\n  \r\n  .product-image {\r\n    border-radius: 5px 5px 0 0;\r\n  }\r\n  \r\n  .container {\r\n    padding: 2px 16px;\r\n  }\r\n  .card-font-small {\r\n      font-size: 0.8rem;\r\n  }\r\n  .card-font-medium {\r\n      font-size: 0.9rem;\r\n  }\r\n  .card-header-margin {\r\n    margin: 0.8rem;\r\n}\r\n.card-details-margin {\r\n    margin: 0.5rem;\r\n}\r\n.str-card-buttons {\r\n  width:6rem;\r\n  background-color: var(--form-btn-background);\r\n  color: var(--form-btn-color);\r\n  margin: 10px;\r\n}\r\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "productService",
                        "type": "ProductService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CardComponent-1",
            "templateData": "<button class=\"card\" (click)=\"viewProduct()\" aria-label=\"View product details\" >\r\n    <!-- tabindex=\"0\" role=\"button\" (keydown)=\"viewProduct()\" -->\r\n    <div class=\"text-center\">\r\n        <img [src]=\"product.imageUrl\" class=\"product-image\" alt=\"Avatar\" onerror=\"this.src='../../../assets/images/noimage.webp';\" width=\"200\" width=\"200\" height=\"200\">\r\n    </div>\r\n    <div class=\"container card-details\">\r\n        <h4 class=\"text-center card-font-medium card-header-margin\"><b>{{product.name}}</b></h4>\r\n        <p class=\"text-center card-font-small card-details-margin\">{{product.description}}</p>\r\n        <p class=\"text-center card-font-small card-details-margin\"><b><span>&#8377; </span> {{product.price}}</b></p>\r\n    </div>\r\n    <div class=\"text-center str-card-buttons-container\">\r\n        <str-form-btn *ngIf=\"currentUser === product.createdBy\" (click)=\"updateProduct($event)\" buttonText=\"{{'products.card.update-button'| translate}}\" isCardButton=\"true\" aria-label=\"Update Product\"></str-form-btn>\r\n        <str-form-btn *ngIf=\"currentUser === product.createdBy\" (click)=\"deleteProduct($event)\" buttonText=\"{{'products.card.delete-button'| translate}}\" isCardButton=\"true\" aria-label=\"Delete Product\"></str-form-btn>\r\n    </div>\r\n</button>"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-ff49f20195434c07f84d5e8406aefb53",
            "file": "src/app/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.scss']\r\n})\r\nexport class FooterComponent {\r\n\r\n  constructor() {\r\n   }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../shared/styles/variables.scss'; \r\n\r\n\r\n.str-footer {\r\n    padding:15px;\r\n    font-size: 10px;\r\n    background-color: var(--footer-background-color);\r\n    color: var(--footer-color);\r\n}",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"str-footer\">\r\n   assignment online music store\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-b7473a31737b915048e3f44202126ff9",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "../app/header/header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "../app/header/header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  templateUrl: '../app/header/header.component.html' ,\n  styleUrls: ['../app/header/header.component.scss'],\n})\nexport default class HeaderComponent {\n \n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../shared/styles/variables.scss';\r\n@import '../shared/styles/utils.scss';\r\n.header{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding:15px;\r\n    background-color: var(--header-background-color);\r\n    flex-wrap: wrap;\r\n}\r\n.header-logout {\r\n    display:flex;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n}\r\n.str-btn-colors {\r\n    background-color: var(--btn-background);\r\n    color: var(--btn-color);\r\n}\r\n",
                    "styleUrl": "../app/header/header.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<header class=\"header\">\r\n        <img src=\"../../assets/images/logo.webp\" alt=\"App Logo\" tabindex=\"0\" aria-label=\"App logo\">\r\n    <div class=\"header-logout\">\r\n            <str-btn (click)=\"changeLanguage()\" aria-label=\"Change language\" buttonText=\"{{'header.change-language' | translate}}\"></str-btn>\r\n            <str-btn *ngIf=\"isAuthenticated()\" aria-label=\"Add Product\" buttonText=\"{{'header.add-product-button' | translate}}\" (click)=\"addProduct()\"></str-btn>\r\n            <str-btn buttonText=\"{{'header.theme-button' | translate}}\" (click)=\"changeTheme()\" aria-label=\"Change theme\"></str-btn>\r\n            <str-btn *ngIf=\"isAuthenticated()\" buttonText=\"{{'header.logout-button' | translate}}\" (click)=\"logout()\" aria-label=\"Log out\"></str-btn>\r\n    </div>\r\n</header>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-27df87bc937d60c1332df6a390bcfabe-1",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "changeLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "changeTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppService } from '../shared/app.service';\r\nimport * as AuthActions from '../shared/store/auth/auth.actions';\r\nimport { ProductService } from '../products/products.service';\r\nimport * as APP_CONSTANTS from '../shared/app.constants';\r\nimport { ThemeService } from '../shared/theme.service';\r\nimport { ProductOperationInfo } from '../shared/models/product';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent {\r\n\r\n  constructor(\r\n     private appService: AppService,\r\n     private store: Store,\r\n     private router:Router,\r\n     private productService: ProductService,\r\n     private themeService: ThemeService,\r\n     private translateService:TranslateService) {\r\n      this.translateService.addLangs(['en', 'fr']);\r\n      this.translateService.setDefaultLang('en');\r\n  \r\n      const browserLang = this.translateService.getBrowserLang();\r\n      this.translateService.use(browserLang.match(/en|fr/) ? browserLang : 'en');\r\n   }\r\n\r\n  changeTheme() {\r\n    if (this.themeService.isDarkTheme()) {\r\n      this.themeService.setLightTheme();\r\n    } else {\r\n      this.themeService.setDarkTheme();\r\n    }\r\n  }\r\n\r\n  addProduct() {\r\n    const productOp:ProductOperationInfo = {\r\n      productOperation:APP_CONSTANTS.PRODUCT_ADD,\r\n      disableFormFields: false\r\n    }\r\n    this.productService.setProductInfo(productOp);\r\n    this.router.navigate(['products/product-add'])\r\n  }\r\n\r\n  logout() {\r\n    this.store.dispatch(AuthActions.logout());\r\n  }\r\n\r\n  isAuthenticated() {\r\n    return this.appService.isAuthenticated();\r\n  }\r\n\r\n  changeLanguage() {\r\n    const currenLang = this.translateService.currentLang;\r\n    if(currenLang === 'en') {\r\n      this.translateService.use('fr');\r\n    } else {\r\n      this.translateService.use('en');\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../shared/styles/variables.scss';\r\n@import '../shared/styles/utils.scss';\r\n.header{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding:15px;\r\n    background-color: var(--header-background-color);\r\n    flex-wrap: wrap;\r\n}\r\n.header-logout {\r\n    display:flex;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n}\r\n.str-btn-colors {\r\n    background-color: var(--btn-background);\r\n    color: var(--btn-color);\r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "appService",
                        "type": "AppService"
                    },
                    {
                        "name": "store",
                        "type": "Store"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "productService",
                        "type": "ProductService"
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<header class=\"header\">\r\n        <img src=\"../../assets/images/logo.webp\" alt=\"App Logo\" tabindex=\"0\" aria-label=\"App logo\">\r\n    <div class=\"header-logout\">\r\n            <str-btn (click)=\"changeLanguage()\" aria-label=\"Change language\" buttonText=\"{{'header.change-language' | translate}}\"></str-btn>\r\n            <str-btn *ngIf=\"isAuthenticated()\" aria-label=\"Add Product\" buttonText=\"{{'header.add-product-button' | translate}}\" (click)=\"addProduct()\"></str-btn>\r\n            <str-btn buttonText=\"{{'header.theme-button' | translate}}\" (click)=\"changeTheme()\" aria-label=\"Change theme\"></str-btn>\r\n            <str-btn *ngIf=\"isAuthenticated()\" buttonText=\"{{'header.logout-button' | translate}}\" (click)=\"logout()\" aria-label=\"Log out\"></str-btn>\r\n    </div>\r\n</header>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-25cd3a8d4302941217be5360b9801635",
            "file": "src/app/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "navigate",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {  Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport * as AuthActions from '../../shared/store/auth/auth.actions';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent  implements OnInit {\r\n  loginForm: FormGroup;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private router: Router\r\n    ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = new FormGroup({\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl('', [Validators.required])\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n      if(this.loginForm.valid) {\r\n        this.store.dispatch(AuthActions.loginAttempted(this.loginForm.value));\r\n      }  \r\n  }\r\n  navigate(event) {\r\n    event.preventDefault();\r\n    this.router.navigate(['auth/register']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../shared/styles/variables.scss';\r\n\r\n.str-submit-btn {\r\n    width:8rem;\r\n    background-color: var(--form-btn-background);\r\n    color: var(--form-btn-color);\r\n}\r\n.signup-link {\r\n    font-size: 12px;\r\n    display: block;\r\n    margin-bottom: 1rem;\r\n}\r\n.tab{\r\n    list-style: none;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    padding:1rem;\r\n    background-color: var(--tab-active-background);\r\n    color: var(--tab-active-color);\r\n}",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"tab\">Login</div>\r\n<form [formGroup]=\"loginForm\">\r\n    <div>\r\n        <div>\r\n            <input aria-label=\"Enter email\" class=\"str-input\" type=\"email\" formControlName=\"email\"\r\n                placeholder=\"Enter your email\" />\r\n                <p class=\"str-error-msg-class\"\r\n                    *ngIf=\"loginForm.controls['email'].touched && loginForm.controls['email'].invalid\">{{'auth.email-validation' | translate}}</p>\r\n        </div>\r\n        <div>\r\n            <input aria-label=\"Enter password\" class=\"str-input\" type=\"password\" formControlName=\"password\"\r\n                placeholder=\"Enter password\" />\r\n                <p class=\"str-error-msg-class\"\r\n                    *ngIf=\"loginForm.controls['password'].touched && loginForm.controls['password'].invalid\">{{'auth.password-validation' | translate}}\r\n                </p>\r\n        </div>\r\n    </div>\r\n    <div class=\"text-center\">\r\n        <str-form-btn (click)=\"onSubmit()\" buttonText=\"{{'auth.submit-button' | translate}}\" aria-label=\"Log in\"></str-form-btn>\r\n        <a class=\"signup-link\" (click)=\"navigate($event)\" href=\"#\" aria-label=\"Click to signup\">{{'auth.signup-link' | translate}}</a>\r\n    </div>\r\n</form>"
        },
        {
            "name": "ProductOperationsComponent",
            "id": "component-ProductOperationsComponent-b6970793d34fae32ba5755090c35d453",
            "file": "src/stories/product-operations.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-product-operations",
            "styleUrls": [
                "../app/products/product-operations/product-operations.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "../app/products/product-operations/product-operations.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n@Component({\r\n  selector: 'storybook-product-operations',\r\n  templateUrl: '../app/products/product-operations/product-operations.component.html' ,\r\n  styleUrls: ['../app/products/product-operations/product-operations.component.scss']\r\n})\r\nexport default class ProductOperationsComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../shared/styles/variables.scss';\r\n\r\n.container {\r\n    width: 50%;\r\n    margin: 3rem auto 0rem auto;\r\n    border-radius: 5px;\r\n}\r\n\r\n.str-submit-btn {\r\n    width:8rem;\r\n    background-color: var(--form-btn-background);\r\n    color: var(--form-btn-color);\r\n}\r\n.image-label {\r\n    font-size: 12px;\r\n    margin: 10px;\r\n    display: block;\r\n    color: $dark-gray\r\n}\r\n.str-product-error {\r\n    width: 70%;\r\n}\r\n",
                    "styleUrl": "../app/products/product-operations/product-operations.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "\r\n<div class=\"container\">\r\n    <form [formGroup]=\"productForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"text-center\">\r\n            <div>\r\n                <input aria-label=\"name\" class=\"str-input\" type=\"text\" formControlName=\"name\" placeholder=\"Enter product name\" [readonly]= \"productOperationInfo.disableFormFields\" />\r\n                <div class=\"str-product-error\">\r\n                    <span class=\"str-error-msg-class\" *ngIf=\"name.touched && name.invalid\">Product name is required</span>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <input aria-label=\"price\" class=\"str-input\" type=\"number\" formControlName=\"price\" placeholder=\"Enter price\" [readonly]= \"productOperationInfo.disableFormFields\"  />\r\n                <div class=\"str-product-error\">\r\n                    <span class=\"str-error-msg-class\" *ngIf=\"price.touched && price.invalid\">Product price is required</span>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <textarea aria-label=\"description\" class=\"str-textarea\" name=\"description\" id=\"\" cols=\"30\" formControlName=\"description\" rows=\"10\"\r\n                 placeholder=\"Add a brief description of the product\" [readonly]= \"productOperationInfo.disableFormFields\">\r\n                </textarea>\r\n            </div>\r\n            <div *ngIf=\"imageUrlPreview\">\r\n                <img width=\"200\" height=\"200\" [src]=\"imageUrlPreview\" alt=\"\">\r\n            </div>\r\n            <div>\r\n                <label for=\"\" class=\"image-label\" >Choose a product image</label>\r\n                <input aria-label=\"product-image\" type=\"file\" #filePicker formControlName=\"imageUrl\" path=\"../../../assets/images/\" \r\n                 (change)=\"onImagePicked($event)\" [readonly]= \"productOperationInfo.disableFormFields\">\r\n            </div>\r\n        </div>\r\n        <div class=\"text-center\">\r\n            <button [attr.aria-label]=\"productOperationInfo.productOperation\" class=\"str-submit-btn str-btn\" *ngIf=\"productOperationInfo.productOperation !== 'View'\">{{ 'products.product-operations.' + buttonText | translate}}</button>\r\n            <button type=\"button\" attr.aria-label=\"Back to products list\" class=\"str-submit-btn str-btn\" (click)=\"cancel()\" >{{'products.product-operations.cancel-button' | translate}}</button>\r\n        </div>\r\n    </form>\r\n</div>"
        },
        {
            "name": "ProductOperationsComponent",
            "id": "component-ProductOperationsComponent-afb8dc3978a759b504e2278e33209804-1",
            "file": "src/app/products/product-operations/product-operations.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-operations",
            "styleUrls": [
                "./product-operations.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-operations.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonText",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "currentUser",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "description",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "imagePath",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "imageUrl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "imageUrlPreview",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "name",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "path",
                    "defaultValue": "'../../../assets/images/'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "price",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "productForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "productOperationInfo",
                    "type": "ProductOperationInfo",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "selectedProduct",
                    "type": "StoreProduct",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97
                },
                {
                    "name": "createProductFormGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "initializeFormData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "onImagePicked",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "setButtonText",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Store } from '@ngrx/store';\r\nimport { ProductService } from '../products.service';\r\nimport * as ProductActions from '../../shared/store/products/product.actions';\r\nimport { StoreProduct } from '../../shared/store/products/products.model';\r\nimport * as APP_CONSTANTS from '../../shared/app.constants';\r\nimport { Router } from '@angular/router';\r\nimport { map } from 'rxjs/operators';\r\nimport { ProductOperationInfo } from '../../shared/models/product';\r\nimport { CurrentUser } from '../../shared/models/user';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n@Component({\r\n  selector: 'app-product-operations',\r\n  templateUrl: './product-operations.component.html',\r\n  styleUrls: ['./product-operations.component.scss']\r\n})\r\nexport class ProductOperationsComponent implements OnInit {\r\n  productForm: FormGroup;\r\n  productOperationInfo: ProductOperationInfo;\r\n  imagePath: string = '';\r\n  path: string = '../../../assets/images/';\r\n  currentUser: string = '';\r\n  imageUrlPreview: string;\r\n  selectedProduct: StoreProduct;\r\n  name: FormControl;\r\n  description: FormControl;\r\n  price: FormControl;\r\n  imageUrl: FormControl;\r\n  buttonText: string;\r\n  constructor(\r\n    private productService:ProductService,\r\n    private store: Store,\r\n    private router: Router) {}\r\n\r\n  ngOnInit(): void {\r\n    this.productOperationInfo = this.productService.getProductInfo();\r\n    this.productForm = this.createProductFormGroup();\r\n    this.selectedProduct = this.productService.getProduct();\r\n    if(this.productOperationInfo.productOperation === APP_CONSTANTS.PRODUCT_UPDATE || this.productOperationInfo.productOperation === APP_CONSTANTS.PRODUCT_VIEW) {\r\n     this.initializeFormData();\r\n    }\r\n    \r\n    this.store.pipe(\r\n      map((state) => state['auth'].currentUser))\r\n    .subscribe((data:CurrentUser) => {\r\n      this.currentUser = data.email;\r\n    })\r\n\r\n    this.setButtonText();\r\n  }\r\n\r\n  createProductFormGroup() {\r\n    this.name = new FormControl('', [Validators.required]);\r\n    this.description = new FormControl('');\r\n    this.price = new FormControl('',[Validators.required]);\r\n    this.imageUrl = new FormControl();\r\n    return new FormGroup({\r\n        name: this.name,\r\n        description: this.description,\r\n        price: this.price,\r\n        imageUrl: this.imageUrl\r\n    });\r\n}\r\nonSubmit() {\r\n  if(this.productForm.valid) {\r\n    const product:StoreProduct = {\r\n      name: this.name.value,\r\n      description: this.description.value,\r\n      price: this.price.value,\r\n      imageUrl: this.imageUrlPreview,\r\n      createdBy: this.currentUser\r\n    }\r\n    if(this.productOperationInfo.productOperation === APP_CONSTANTS.PRODUCT_ADD) {\r\n  \r\n      this.store.dispatch(ProductActions.productAddAttempted({product}));\r\n    } else {\r\n      product.id = this.selectedProduct.id;\r\n      this.store.dispatch(ProductActions.productUpdateAttempt({product}))\r\n    }\r\n  }\r\n}\r\nonImagePicked(event) {\r\n const file = (event.target as HTMLInputElement).files[0];\r\nif(file) {\r\n  this.imagePath = this.path+file.name;\r\n  this.imageUrlPreview = this.imagePath;\r\n}\r\n}\r\ninitializeFormData() {\r\n  const {name, description, price, imageUrl} = this.selectedProduct;\r\n  this.name.setValue(name);\r\n  this.imageUrlPreview = imageUrl;\r\n  this.price.setValue(price);\r\n  this.description.setValue(description);\r\n}\r\n  cancel() {\r\n    this.router.navigate(['products']);\r\n  }\r\n  setButtonText() {\r\n    console.log('set button test ');\r\n    if(this.productOperationInfo.productOperation === APP_CONSTANTS.PRODUCT_ADD) {\r\n      this.buttonText = 'add-button';\r\n    } else {\r\n      this.buttonText = 'update-button';\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../shared/styles/variables.scss';\r\n\r\n.container {\r\n    width: 50%;\r\n    margin: 3rem auto 0rem auto;\r\n    border-radius: 5px;\r\n}\r\n\r\n.str-submit-btn {\r\n    width:8rem;\r\n    background-color: var(--form-btn-background);\r\n    color: var(--form-btn-color);\r\n}\r\n.image-label {\r\n    font-size: 12px;\r\n    margin: 10px;\r\n    display: block;\r\n    color: $dark-gray\r\n}\r\n.str-product-error {\r\n    width: 70%;\r\n}\r\n",
                    "styleUrl": "./product-operations.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "productService",
                        "type": "ProductService"
                    },
                    {
                        "name": "store",
                        "type": "Store"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ProductOperationsComponent-1",
            "templateData": "\r\n<div class=\"container\">\r\n    <form [formGroup]=\"productForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"text-center\">\r\n            <div>\r\n                <input aria-label=\"name\" class=\"str-input\" type=\"text\" formControlName=\"name\" placeholder=\"Enter product name\" [readonly]= \"productOperationInfo.disableFormFields\" />\r\n                <div class=\"str-product-error\">\r\n                    <span class=\"str-error-msg-class\" *ngIf=\"name.touched && name.invalid\">Product name is required</span>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <input aria-label=\"price\" class=\"str-input\" type=\"number\" formControlName=\"price\" placeholder=\"Enter price\" [readonly]= \"productOperationInfo.disableFormFields\"  />\r\n                <div class=\"str-product-error\">\r\n                    <span class=\"str-error-msg-class\" *ngIf=\"price.touched && price.invalid\">Product price is required</span>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <textarea aria-label=\"description\" class=\"str-textarea\" name=\"description\" id=\"\" cols=\"30\" formControlName=\"description\" rows=\"10\"\r\n                 placeholder=\"Add a brief description of the product\" [readonly]= \"productOperationInfo.disableFormFields\">\r\n                </textarea>\r\n            </div>\r\n            <div *ngIf=\"imageUrlPreview\">\r\n                <img width=\"200\" height=\"200\" [src]=\"imageUrlPreview\" alt=\"\">\r\n            </div>\r\n            <div>\r\n                <label for=\"\" class=\"image-label\" >Choose a product image</label>\r\n                <input aria-label=\"product-image\" type=\"file\" #filePicker formControlName=\"imageUrl\" path=\"../../../assets/images/\" \r\n                 (change)=\"onImagePicked($event)\" [readonly]= \"productOperationInfo.disableFormFields\">\r\n            </div>\r\n        </div>\r\n        <div class=\"text-center\">\r\n            <button [attr.aria-label]=\"productOperationInfo.productOperation\" class=\"str-submit-btn str-btn\" *ngIf=\"productOperationInfo.productOperation !== 'View'\">{{ 'products.product-operations.' + buttonText | translate}}</button>\r\n            <button type=\"button\" attr.aria-label=\"Back to products list\" class=\"str-submit-btn str-btn\" (click)=\"cancel()\" >{{'products.product-operations.cancel-button' | translate}}</button>\r\n        </div>\r\n    </form>\r\n</div>"
        },
        {
            "name": "ProductsComponent",
            "id": "component-ProductsComponent-1d8cab9ffd2a97f204e182576e373a37",
            "file": "src/app/products/products.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-products",
            "styleUrls": [
                "./products.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./products.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentUser",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "products",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Actions, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { map } from 'rxjs/operators';\r\nimport { Product } from '../shared/models/product';\r\nimport { AppState } from '../shared/store/app.state';\r\nimport * as ProductActions from '../shared/store/products/product.actions';\r\n@Component({\r\n  selector: 'app-products',\r\n  templateUrl: './products.component.html',\r\n  styleUrls: ['./products.component.scss']\r\n})\r\nexport class ProductsComponent implements OnInit {\r\n  products: Product[];\r\n  currentUser: any;\r\n  constructor(\r\n    private store: Store<AppState>) { }\r\n  \r\n  ngOnInit(): void {\r\n    this.store.dispatch(ProductActions.productFetchAttempt());\r\n\r\n    this.store.pipe(\r\n      map((state) => state['auth'].currentUser))\r\n     .subscribe((data:any) => {\r\n      this.currentUser = data;\r\n    });\r\n    \r\n    this.store.pipe(\r\n      map((state) => state['products'].products)\r\n    ).subscribe((data:any) => {\r\n      this.products = data;\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-container{\r\n    display: grid;\r\n    grid-gap: 3rem;\r\n    padding: 2rem;\r\n    grid-template-columns: 22% 22% 22% 22%;\r\n}\r\n\r\n@import '../shared/styles/media-queries.scss';\r\n",
                    "styleUrl": "./products.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card-container\">\r\n  <ng-container *ngFor=\"let product of products\">\r\n    <app-card [product]=\"product\"></app-card>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "RegistrationComponent",
            "id": "component-RegistrationComponent-fecfdee7cd8629dfdb4cdd8073bf81df",
            "file": "src/app/auth/registration/registration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-registration",
            "styleUrls": [
                "./registration.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./registration.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "confirmPassword",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "email",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "password",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "passwordMismatch",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "registrationForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport * as AuthActions from '../../shared/store/auth/auth.actions';\r\nimport { Store } from '@ngrx/store';\r\n\r\n@Component({\r\n  selector: 'app-registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.scss']\r\n})\r\nexport class RegistrationComponent  implements OnInit {\r\n  registrationForm: FormGroup;\r\n  email: FormControl;\r\n  password: FormControl;\r\n  confirmPassword: FormControl;\r\n  passwordMismatch: boolean = false;\r\n  constructor(\r\n     private store: Store\r\n     ) {\r\n   }\r\n\r\n  ngOnInit(): void {\r\n    this.registrationForm = new FormGroup({\r\n      email:  new FormControl('', [Validators.required]),\r\n      password: new FormControl('', [Validators.required]),\r\n      confirmPassword: new FormControl('', [Validators.required])\r\n  });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.passwordMismatch = false;\r\n    if(this.registrationForm.valid) {\r\n      const email = this.registrationForm.controls['email'].value;\r\n      const password = this.registrationForm.controls['password'].value;\r\n      const cnfmpassword = this.registrationForm.controls['confirmPassword'].value;\r\n    if(password === cnfmpassword) {\r\n      this.store.dispatch(AuthActions.signup({email, password}));\r\n    } else {\r\n      this.passwordMismatch = true;\r\n    }\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../shared/styles/variables.scss';\r\n\r\n.str-submit-btn {\r\n    width:8rem;\r\n    background-color: var(--form-btn-background);\r\n    color: var(--form-btn-color);\r\n}\r\n.tab{\r\n    list-style: none;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    padding:1rem;\r\n    background-color: var(--tab-active-background);\r\n    color: var(--tab-active-color);\r\n}",
                    "styleUrl": "./registration.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"tab\">Register</div>\r\n<form [formGroup]=\"registrationForm\">\r\n    <div>\r\n      <input\r\n        aria-label=\"Enter email\"\r\n        class=\"str-input\"\r\n        type=\"email\"\r\n        formControlName=\"email\"\r\n        placeholder=\"Enter your email\"\r\n      />\r\n        <p class=\"str-error-msg-class\" *ngIf=\"registrationForm.controls['email'].touched && registrationForm.controls['email'].invalid\"\r\n          >{{'auth.email-validation' | translate}}</p>\r\n    </div>\r\n    <div>\r\n      <input\r\n        aria-label=\"Select a password\"\r\n        class=\"str-input\"\r\n        type=\"password\"\r\n        formControlName=\"password\"\r\n        placeholder=\"Select a password\"\r\n      />\r\n        <p\r\n          class=\"str-error-msg-class\"\r\n          *ngIf=\"registrationForm.controls['password'].touched && registrationForm.controls['password'].invalid\"\r\n          >{{'auth.password-validation' | translate}}</p>\r\n    </div>\r\n    <div>\r\n      <input\r\n        aria-label=\"confirm password\"\r\n        class=\"str-input\"\r\n        type=\"password\"\r\n        formControlName=\"confirmPassword\"\r\n        placeholder=\"Retype the password\"\r\n      />\r\n        <p\r\n          class=\"str-error-msg-class\"\r\n          *ngIf=\"registrationForm.controls['confirmPassword'].touched && registrationForm.controls['confirmPassword'].invalid\"\r\n          >{{'auth.confirm-password-validation' | translate}}\r\n    </p>\r\n    </div>\r\n      <p class=\"str-error-msg-class\" *ngIf=\"passwordMismatch\"\r\n        >{{'auth.password-mismatch-validation' | translate}}</p\r\n      >\r\n  <div class=\"text-center\">\r\n    <str-form-btn (click)=\"onSubmit()\" buttonText=\"{{'auth.submit-button' | translate}}\" aria-label=\"Sign up\"></str-form-btn>\r\n  </div>\r\n</form>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "FooterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RegistrationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "ProductOperationsComponent"
                        },
                        {
                            "name": "ProductsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ProductsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductsRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ProductOperations.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  cancel: () => {console.log('cancel called')},\r\n  onSubmit: () => {console.log('onSubmit called')},\r\n  onImagePicked: (event) => {console.log('onImagePicked called')}\r\n}"
            },
            {
                "name": "addProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ProductOperations.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: ProductOperationsComponent,\r\n  props: {\r\n    productForm: getMockFormGroup(),\r\n    name : {touched: false, invalid: false},\r\n    price : {touched: false, invalid: false},\r\n    imageUrlPreview: '',\r\n    productOperationInfo: {\r\n      productOperation: 'Add',\r\n      disableFormFields: false,\r\n    },\r\n    buttonText: 'add-button',\r\n    cancel: actionsData.cancel,\r\n    onSubmit: actionsData.onSubmit,\r\n    onImagePicked : actionsData.onImagePicked\r\n  }, \r\n})"
            },
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/styles/themes/theme.ts",
                "type": "Theme",
                "defaultValue": "{\r\n    name: \"dark\",\r\n    properties: {\r\n        \"--header-background-color\": \"#232323\",\r\n        \"--body-background-color\": \"#eaeaea\",\r\n        \"--footer-background-color\": \"#666666\",\r\n        \"--footer-color\": \"#fff\",\r\n        \"--btn-background\": \"#666666\",\r\n        \"--btn-color\": \"#fff\",\r\n        \"--tab-active-background\": \"#666666\",\r\n        \"--tab-active-color\": \"#fff\",\r\n        \"--tab-wrapper-color\": \"#666666\",\r\n        \"--form-btn-background\": \"#666666\",\r\n        \"--form-btn-color\":\"#fff\"\r\n    }\r\n  }"
            },
            {
                "name": "DARK_THEME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/app.constants.ts",
                "type": "string",
                "defaultValue": "'dark'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "HOST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/urls.ts",
                "type": "string",
                "defaultValue": "'http://localhost:3000/'"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/auth/auth.reducer.ts",
                "type": "AuthState",
                "defaultValue": "{\r\n  currentUser: {\r\n    accessToken: '',\r\n    email: '',\r\n    isLoggedIn: false\r\n  }\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.reducer.ts",
                "type": "ProductsState",
                "defaultValue": "{\r\n    products: []\r\n}"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/styles/themes/theme.ts",
                "type": "Theme",
                "defaultValue": "{\r\n    name: \"light\",\r\n    properties: {\r\n        \"--header-background-color\": \"#cd0029\",\r\n        \"--body-background-color\": \"#fff\",\r\n        \"--footer-background-color\": \"#eaeaea\",\r\n        \"--footer-color\": \"#cd0029\",\r\n        \"--btn-background\": \"#fff\",\r\n        \"--btn-color\": \"#CC0028\",\r\n        \"--tab-active-background\": \"#cd0029\",\r\n        \"--tab-active-color\": \"#fff\",\r\n        \"--tab-wrapper-color\": \"#ec1313\",\r\n        \"--form-btn-background\": \"#cd0029\",\r\n        \"--form-btn-color\":\"#fff\"\r\n    }\r\n  }"
            },
            {
                "name": "LIGHT_THEME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/app.constants.ts",
                "type": "string",
                "defaultValue": "'light'"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: HeaderComponent,\r\n  props: {\r\n    isAuthenticated: () => true,\r\n  },\r\n})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: HeaderComponent,\r\n  props: {\r\n    isAuthenticated: () => false,\r\n  },\r\n})"
            },
            {
                "name": "LOGIN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/urls.ts",
                "type": "string",
                "defaultValue": "'login'"
            },
            {
                "name": "LOGIN_ATTEMPT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/auth/auth.actions.ts",
                "type": "string",
                "defaultValue": "'[Login Page] Login Attempted'"
            },
            {
                "name": "LOGIN_FAILURE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/auth/auth.actions.ts",
                "type": "string",
                "defaultValue": "'[Login Page] Login Failure'"
            },
            {
                "name": "LOGIN_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/auth/auth.actions.ts",
                "type": "string",
                "defaultValue": "'[Login Page] Login Successful'"
            },
            {
                "name": "loginAttempted",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/auth/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  LOGIN_ATTEMPT,\r\n  props<{email:string; password: string}>()\r\n)"
            },
            {
                "name": "loginCompleteReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/auth/auth.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(AuthActions.loginSuccess, (state, payload:any) => {\r\n      return {\r\n          ...state,\r\n          currentUser: {\r\n            email: payload.email,\r\n            accessToken: payload.accessToken,\r\n            isLoggedIn: true\r\n          }\r\n      }\r\n  }),\r\n\r\n  on(AuthActions.logout, (state) => {\r\n    \r\n    return {\r\n        ...state,\r\n        currentUser: {\r\n          email: '',\r\n          accessToken: '',\r\n          isLoggedIn: false\r\n        }\r\n    }\r\n})\r\n)"
            },
            {
                "name": "loginFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/auth/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  LOGIN_FAILURE\r\n)"
            },
            {
                "name": "loginSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/auth/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  LOGIN_SUCCESS,\r\n  props<{email:string; accessToken:string;}>()\r\n)"
            },
            {
                "name": "logout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/auth/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  LOGOUT\r\n)"
            },
            {
                "name": "LOGOUT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/auth/auth.actions.ts",
                "type": "string",
                "defaultValue": "'[Header Page] Logout'"
            },
            {
                "name": "mock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/jest-config/globalmocks.ts",
                "type": "",
                "defaultValue": "() => {\r\n    let storage = {};\r\n    return {\r\n      getItem: key => (key in storage ? storage[key] : null),\r\n      setItem: (key, value) => (storage[key] = value || ''),\r\n      removeItem: key => delete storage[key],\r\n      clear: () => (storage = {}),\r\n    };\r\n  }"
            },
            {
                "name": "nonOwner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Card.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: CardComponent,\r\n    props: {\r\n      product: {\r\n              name: \"Laney, Acoustic Guitar Amp, 80W A1+\",\r\n              description: \"The A1+ is designed to give the discerning acoustic player an amplified acoustic performance to match the tone and dynamics of the top acoustic instruments on the market.\",\r\n              price: 26460,\r\n              imageUrl: \"../../../assets/images/acoustic_amp.webp\",\r\n              createdBy: \"keyur@gmail.com\",\r\n              id: 7\r\n      },\r\n      currentUser: 'xyz@gmail.com'\r\n    },\r\n  })"
            },
            {
                "name": "owner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Card.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: CardComponent,\r\n  props: {\r\n    product: {\r\n            name: \"Laney, Acoustic Guitar Amp, 80W A1+\",\r\n            description: \"The A1+ is designed to give the discerning acoustic player an amplified acoustic performance to match the tone and dynamics of the top acoustic instruments on the market.\",\r\n            price: 26460,\r\n            imageUrl: \"../../../assets/images/acoustic_amp.webp\",\r\n            createdBy: \"keyur@gmail.com\",\r\n            id: 7\r\n    },\r\n    currentUser: 'keyur@gmail.com'\r\n  },\r\n})"
            },
            {
                "name": "PRODUCT_ADD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/app.constants.ts",
                "type": "string",
                "defaultValue": "'Add'"
            },
            {
                "name": "PRODUCT_ADD_ATTEMPT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Product Page] product add Attempted '"
            },
            {
                "name": "PRODUCT_ADD_FAILURE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Product Page] product add Failure '"
            },
            {
                "name": "PRODUCT_ADD_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Product Page] product add Successful '"
            },
            {
                "name": "PRODUCT_DELETE_ATTEMPT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Product Page] product delete Attempted '"
            },
            {
                "name": "PRODUCT_DELETE_FAILURE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Product Page] product delete Failure '"
            },
            {
                "name": "PRODUCT_DELETE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Product Page] product delete Successful '"
            },
            {
                "name": "PRODUCT_FETCH_ATTEMPT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Product Page] products fetch Attempted'"
            },
            {
                "name": "PRODUCT_FETCH_FAILURE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Product Page] products fetch Failure'"
            },
            {
                "name": "PRODUCT_FETCH_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Product Page] products fetch Successful'"
            },
            {
                "name": "PRODUCT_UPDATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/app.constants.ts",
                "type": "string",
                "defaultValue": "'Update'"
            },
            {
                "name": "PRODUCT_UPDATE_ATTEMPT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Product Page] product update Attempted '"
            },
            {
                "name": "PRODUCT_UPDATE_FAILURE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Product Page] product update Failure '"
            },
            {
                "name": "PRODUCT_UPDATE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Product Page] product update Successful '"
            },
            {
                "name": "PRODUCT_VIEW",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/app.constants.ts",
                "type": "string",
                "defaultValue": "'View'"
            },
            {
                "name": "productAddAttempted",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  PRODUCT_ADD_ATTEMPT,\r\n  props<{product: StoreProduct}>()\r\n)"
            },
            {
                "name": "productAddSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  PRODUCT_ADD_SUCCESS,\r\n  props<{product: StoreProduct}>()\r\n)"
            },
            {
                "name": "productDeleteAttempt",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n    PRODUCT_DELETE_ATTEMPT,\r\n    props<{product: StoreProduct}>()\r\n  )"
            },
            {
                "name": "productDeleteSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n    PRODUCT_DELETE_SUCCESS,\r\n    props<{product: StoreProduct}>()\r\n  )"
            },
            {
                "name": "productFetchAttempt",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n    PRODUCT_FETCH_ATTEMPT\r\n  )"
            },
            {
                "name": "productFetchSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n    PRODUCT_FETCH_SUCCESS,\r\n    props<{products: StoreProduct[]}>()\r\n  )"
            },
            {
                "name": "PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/urls.ts",
                "type": "string",
                "defaultValue": "'products'"
            },
            {
                "name": "productsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(ProductActions.productAddSuccess, (state, payload:any) => {\r\n    return {\r\n        ...state,\r\n        products: [...state.products, payload ]\r\n    }\r\n}),\r\non(ProductActions.productFetchSuccess, (state, payload:any) => {\r\n  return {\r\n      ...state,\r\n      products: payload.data\r\n  }\r\n}),\r\non(ProductActions.productUpdateSuccess, (state, payload:any) => {\r\n  return {\r\n      ...state,\r\n      products: [...state.products, payload.data]\r\n  }\r\n}),\r\non(ProductActions.productDeleteSuccess, (state, payload:any) => {\r\n  const stateCopy = {...state};\r\n  const deleteId = payload.action.product.id;\r\n  const updatedProducts = state.products.filter((prod) =>  deleteId !== prod.id);\r\n  return {\r\n      ...state,\r\n      products: [...updatedProducts]\r\n  }\r\n}),\r\n)"
            },
            {
                "name": "productUpdateAttempt",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n    PRODUCT_UPDATE_ATTEMPT,\r\n    props<{product: StoreProduct}>()\r\n  )"
            },
            {
                "name": "productUpdateFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n    PRODUCT_UPDATE_FAILURE\r\n  )"
            },
            {
                "name": "productUpdateSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/products/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n    PRODUCT_UPDATE_SUCCESS\r\n  )"
            },
            {
                "name": "REGISTER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/urls.ts",
                "type": "string",
                "defaultValue": "'register'"
            },
            {
                "name": "signup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/auth/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  SIGNUP_ATTEMPT,\r\n  props<{email:string; password:string;}>()\r\n)"
            },
            {
                "name": "SIGNUP_ATTEMPT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/auth/auth.actions.ts",
                "type": "string",
                "defaultValue": "'[Login Page] Signup Attempted'"
            },
            {
                "name": "SIGNUP_FAILURE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/auth/auth.actions.ts",
                "type": "string",
                "defaultValue": "'[Login Page] Signup Failure'"
            },
            {
                "name": "SIGNUP_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/auth/auth.actions.ts",
                "type": "string",
                "defaultValue": "'[Login Page] Signup Successful'"
            },
            {
                "name": "signupFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/auth/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  SIGNUP_FAILURE\r\n)"
            },
            {
                "name": "signupSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/store/auth/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  SIGNUP_SUCCESS,\r\n  props<{email:string; password:string;}>()\r\n)"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Card.stories.ts",
                "type": "Story<CardComponent>",
                "defaultValue": "(args: CardComponent) => ({\r\n  component: CardComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ProductOperations.stories.ts",
                "type": "Story<ProductOperationsComponent>",
                "defaultValue": "(args: ProductOperationsComponent) => ({\r\n  component: ProductOperationsComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "updateProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ProductOperations.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: ProductOperationsComponent,\r\n  props: {\r\n    productForm: getMockFormGroup(),\r\n    name : new FormControl('', [Validators.required]).setValue('Laney, Acoustic Guitar Amp, 80W A1+'),\r\n    description : new FormControl('').setValue('The A1+ is designed to give the discerning acoustic player an amplified acoustic performance to match the tone and dynamics of the top acoustic instruments on the market.'),\r\n    price : new FormControl('',[Validators.required]).setValue(26460),\r\n    imageUrl : new FormControl(),\r\n    imageUrlPreview: '../../../assets/images/acoustic_amp.webp',\r\n    productOperationInfo: {\r\n      productOperation: 'Update',\r\n      disableFormFields: false,\r\n    },\r\n    buttonText: 'update-button',\r\n    cancel: actionsData.cancel,\r\n    onSubmit: actionsData.onSubmit,\r\n    onImagePicked : actionsData.onImagePicked\r\n  }, \r\n})"
            }
        ],
        "functions": [
            {
                "name": "getMockFormGroup",
                "file": "src/stories/ProductOperations.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": []
            },
            {
                "name": "getMockUpdateFormGroup",
                "file": "src/stories/ProductOperations.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": []
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/stories/Card.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/stories/Header.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/stories/ProductOperations.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/auth/auth.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/products/products.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/shared/store/auth/auth.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/shared/store/products/product.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/ProductOperations.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ProductOperations.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  cancel: () => {console.log('cancel called')},\r\n  onSubmit: () => {console.log('onSubmit called')},\r\n  onImagePicked: (event) => {console.log('onImagePicked called')}\r\n}"
                },
                {
                    "name": "addProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ProductOperations.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: ProductOperationsComponent,\r\n  props: {\r\n    productForm: getMockFormGroup(),\r\n    name : {touched: false, invalid: false},\r\n    price : {touched: false, invalid: false},\r\n    imageUrlPreview: '',\r\n    productOperationInfo: {\r\n      productOperation: 'Add',\r\n      disableFormFields: false,\r\n    },\r\n    buttonText: 'add-button',\r\n    cancel: actionsData.cancel,\r\n    onSubmit: actionsData.onSubmit,\r\n    onImagePicked : actionsData.onImagePicked\r\n  }, \r\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ProductOperations.stories.ts",
                    "type": "Story<ProductOperationsComponent>",
                    "defaultValue": "(args: ProductOperationsComponent) => ({\r\n  component: ProductOperationsComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "updateProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ProductOperations.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: ProductOperationsComponent,\r\n  props: {\r\n    productForm: getMockFormGroup(),\r\n    name : new FormControl('', [Validators.required]).setValue('Laney, Acoustic Guitar Amp, 80W A1+'),\r\n    description : new FormControl('').setValue('The A1+ is designed to give the discerning acoustic player an amplified acoustic performance to match the tone and dynamics of the top acoustic instruments on the market.'),\r\n    price : new FormControl('',[Validators.required]).setValue(26460),\r\n    imageUrl : new FormControl(),\r\n    imageUrlPreview: '../../../assets/images/acoustic_amp.webp',\r\n    productOperationInfo: {\r\n      productOperation: 'Update',\r\n      disableFormFields: false,\r\n    },\r\n    buttonText: 'update-button',\r\n    cancel: actionsData.cancel,\r\n    onSubmit: actionsData.onSubmit,\r\n    onImagePicked : actionsData.onImagePicked\r\n  }, \r\n})"
                }
            ],
            "src/app/shared/styles/themes/theme.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/styles/themes/theme.ts",
                    "type": "Theme",
                    "defaultValue": "{\r\n    name: \"dark\",\r\n    properties: {\r\n        \"--header-background-color\": \"#232323\",\r\n        \"--body-background-color\": \"#eaeaea\",\r\n        \"--footer-background-color\": \"#666666\",\r\n        \"--footer-color\": \"#fff\",\r\n        \"--btn-background\": \"#666666\",\r\n        \"--btn-color\": \"#fff\",\r\n        \"--tab-active-background\": \"#666666\",\r\n        \"--tab-active-color\": \"#fff\",\r\n        \"--tab-wrapper-color\": \"#666666\",\r\n        \"--form-btn-background\": \"#666666\",\r\n        \"--form-btn-color\":\"#fff\"\r\n    }\r\n  }"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/styles/themes/theme.ts",
                    "type": "Theme",
                    "defaultValue": "{\r\n    name: \"light\",\r\n    properties: {\r\n        \"--header-background-color\": \"#cd0029\",\r\n        \"--body-background-color\": \"#fff\",\r\n        \"--footer-background-color\": \"#eaeaea\",\r\n        \"--footer-color\": \"#cd0029\",\r\n        \"--btn-background\": \"#fff\",\r\n        \"--btn-color\": \"#CC0028\",\r\n        \"--tab-active-background\": \"#cd0029\",\r\n        \"--tab-active-color\": \"#fff\",\r\n        \"--tab-wrapper-color\": \"#ec1313\",\r\n        \"--form-btn-background\": \"#cd0029\",\r\n        \"--form-btn-color\":\"#fff\"\r\n    }\r\n  }"
                }
            ],
            "src/app/shared/app.constants.ts": [
                {
                    "name": "DARK_THEME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/app.constants.ts",
                    "type": "string",
                    "defaultValue": "'dark'"
                },
                {
                    "name": "LIGHT_THEME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/app.constants.ts",
                    "type": "string",
                    "defaultValue": "'light'"
                },
                {
                    "name": "PRODUCT_ADD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/app.constants.ts",
                    "type": "string",
                    "defaultValue": "'Add'"
                },
                {
                    "name": "PRODUCT_UPDATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/app.constants.ts",
                    "type": "string",
                    "defaultValue": "'Update'"
                },
                {
                    "name": "PRODUCT_VIEW",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/app.constants.ts",
                    "type": "string",
                    "defaultValue": "'View'"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "src/app/shared/urls.ts": [
                {
                    "name": "HOST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/urls.ts",
                    "type": "string",
                    "defaultValue": "'http://localhost:3000/'"
                },
                {
                    "name": "LOGIN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/urls.ts",
                    "type": "string",
                    "defaultValue": "'login'"
                },
                {
                    "name": "PRODUCTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/urls.ts",
                    "type": "string",
                    "defaultValue": "'products'"
                },
                {
                    "name": "REGISTER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/urls.ts",
                    "type": "string",
                    "defaultValue": "'register'"
                }
            ],
            "src/app/shared/store/auth/auth.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/auth/auth.reducer.ts",
                    "type": "AuthState",
                    "defaultValue": "{\r\n  currentUser: {\r\n    accessToken: '',\r\n    email: '',\r\n    isLoggedIn: false\r\n  }\r\n}"
                },
                {
                    "name": "loginCompleteReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/auth/auth.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(AuthActions.loginSuccess, (state, payload:any) => {\r\n      return {\r\n          ...state,\r\n          currentUser: {\r\n            email: payload.email,\r\n            accessToken: payload.accessToken,\r\n            isLoggedIn: true\r\n          }\r\n      }\r\n  }),\r\n\r\n  on(AuthActions.logout, (state) => {\r\n    \r\n    return {\r\n        ...state,\r\n        currentUser: {\r\n          email: '',\r\n          accessToken: '',\r\n          isLoggedIn: false\r\n        }\r\n    }\r\n})\r\n)"
                }
            ],
            "src/app/shared/store/products/product.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.reducer.ts",
                    "type": "ProductsState",
                    "defaultValue": "{\r\n    products: []\r\n}"
                },
                {
                    "name": "productsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(ProductActions.productAddSuccess, (state, payload:any) => {\r\n    return {\r\n        ...state,\r\n        products: [...state.products, payload ]\r\n    }\r\n}),\r\non(ProductActions.productFetchSuccess, (state, payload:any) => {\r\n  return {\r\n      ...state,\r\n      products: payload.data\r\n  }\r\n}),\r\non(ProductActions.productUpdateSuccess, (state, payload:any) => {\r\n  return {\r\n      ...state,\r\n      products: [...state.products, payload.data]\r\n  }\r\n}),\r\non(ProductActions.productDeleteSuccess, (state, payload:any) => {\r\n  const stateCopy = {...state};\r\n  const deleteId = payload.action.product.id;\r\n  const updatedProducts = state.products.filter((prod) =>  deleteId !== prod.id);\r\n  return {\r\n      ...state,\r\n      products: [...updatedProducts]\r\n  }\r\n}),\r\n)"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: HeaderComponent,\r\n  props: {\r\n    isAuthenticated: () => true,\r\n  },\r\n})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: HeaderComponent,\r\n  props: {\r\n    isAuthenticated: () => false,\r\n  },\r\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/shared/store/auth/auth.actions.ts": [
                {
                    "name": "LOGIN_ATTEMPT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/auth/auth.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Login Page] Login Attempted'"
                },
                {
                    "name": "LOGIN_FAILURE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/auth/auth.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Login Page] Login Failure'"
                },
                {
                    "name": "LOGIN_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/auth/auth.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Login Page] Login Successful'"
                },
                {
                    "name": "loginAttempted",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/auth/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  LOGIN_ATTEMPT,\r\n  props<{email:string; password: string}>()\r\n)"
                },
                {
                    "name": "loginFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/auth/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  LOGIN_FAILURE\r\n)"
                },
                {
                    "name": "loginSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/auth/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  LOGIN_SUCCESS,\r\n  props<{email:string; accessToken:string;}>()\r\n)"
                },
                {
                    "name": "logout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/auth/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  LOGOUT\r\n)"
                },
                {
                    "name": "LOGOUT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/auth/auth.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Header Page] Logout'"
                },
                {
                    "name": "signup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/auth/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  SIGNUP_ATTEMPT,\r\n  props<{email:string; password:string;}>()\r\n)"
                },
                {
                    "name": "SIGNUP_ATTEMPT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/auth/auth.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Login Page] Signup Attempted'"
                },
                {
                    "name": "SIGNUP_FAILURE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/auth/auth.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Login Page] Signup Failure'"
                },
                {
                    "name": "SIGNUP_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/auth/auth.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Login Page] Signup Successful'"
                },
                {
                    "name": "signupFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/auth/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  SIGNUP_FAILURE\r\n)"
                },
                {
                    "name": "signupSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/auth/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  SIGNUP_SUCCESS,\r\n  props<{email:string; password:string;}>()\r\n)"
                }
            ],
            "src/jest-config/globalmocks.ts": [
                {
                    "name": "mock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/jest-config/globalmocks.ts",
                    "type": "",
                    "defaultValue": "() => {\r\n    let storage = {};\r\n    return {\r\n      getItem: key => (key in storage ? storage[key] : null),\r\n      setItem: (key, value) => (storage[key] = value || ''),\r\n      removeItem: key => delete storage[key],\r\n      clear: () => (storage = {}),\r\n    };\r\n  }"
                }
            ],
            "src/stories/Card.stories.ts": [
                {
                    "name": "nonOwner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Card.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: CardComponent,\r\n    props: {\r\n      product: {\r\n              name: \"Laney, Acoustic Guitar Amp, 80W A1+\",\r\n              description: \"The A1+ is designed to give the discerning acoustic player an amplified acoustic performance to match the tone and dynamics of the top acoustic instruments on the market.\",\r\n              price: 26460,\r\n              imageUrl: \"../../../assets/images/acoustic_amp.webp\",\r\n              createdBy: \"keyur@gmail.com\",\r\n              id: 7\r\n      },\r\n      currentUser: 'xyz@gmail.com'\r\n    },\r\n  })"
                },
                {
                    "name": "owner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Card.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: CardComponent,\r\n  props: {\r\n    product: {\r\n            name: \"Laney, Acoustic Guitar Amp, 80W A1+\",\r\n            description: \"The A1+ is designed to give the discerning acoustic player an amplified acoustic performance to match the tone and dynamics of the top acoustic instruments on the market.\",\r\n            price: 26460,\r\n            imageUrl: \"../../../assets/images/acoustic_amp.webp\",\r\n            createdBy: \"keyur@gmail.com\",\r\n            id: 7\r\n    },\r\n    currentUser: 'keyur@gmail.com'\r\n  },\r\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Card.stories.ts",
                    "type": "Story<CardComponent>",
                    "defaultValue": "(args: CardComponent) => ({\r\n  component: CardComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/shared/store/products/product.actions.ts": [
                {
                    "name": "PRODUCT_ADD_ATTEMPT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Product Page] product add Attempted '"
                },
                {
                    "name": "PRODUCT_ADD_FAILURE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Product Page] product add Failure '"
                },
                {
                    "name": "PRODUCT_ADD_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Product Page] product add Successful '"
                },
                {
                    "name": "PRODUCT_DELETE_ATTEMPT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Product Page] product delete Attempted '"
                },
                {
                    "name": "PRODUCT_DELETE_FAILURE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Product Page] product delete Failure '"
                },
                {
                    "name": "PRODUCT_DELETE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Product Page] product delete Successful '"
                },
                {
                    "name": "PRODUCT_FETCH_ATTEMPT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Product Page] products fetch Attempted'"
                },
                {
                    "name": "PRODUCT_FETCH_FAILURE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Product Page] products fetch Failure'"
                },
                {
                    "name": "PRODUCT_FETCH_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Product Page] products fetch Successful'"
                },
                {
                    "name": "PRODUCT_UPDATE_ATTEMPT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Product Page] product update Attempted '"
                },
                {
                    "name": "PRODUCT_UPDATE_FAILURE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Product Page] product update Failure '"
                },
                {
                    "name": "PRODUCT_UPDATE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Product Page] product update Successful '"
                },
                {
                    "name": "productAddAttempted",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  PRODUCT_ADD_ATTEMPT,\r\n  props<{product: StoreProduct}>()\r\n)"
                },
                {
                    "name": "productAddSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  PRODUCT_ADD_SUCCESS,\r\n  props<{product: StoreProduct}>()\r\n)"
                },
                {
                    "name": "productDeleteAttempt",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n    PRODUCT_DELETE_ATTEMPT,\r\n    props<{product: StoreProduct}>()\r\n  )"
                },
                {
                    "name": "productDeleteSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n    PRODUCT_DELETE_SUCCESS,\r\n    props<{product: StoreProduct}>()\r\n  )"
                },
                {
                    "name": "productFetchAttempt",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n    PRODUCT_FETCH_ATTEMPT\r\n  )"
                },
                {
                    "name": "productFetchSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n    PRODUCT_FETCH_SUCCESS,\r\n    props<{products: StoreProduct[]}>()\r\n  )"
                },
                {
                    "name": "productUpdateAttempt",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n    PRODUCT_UPDATE_ATTEMPT,\r\n    props<{product: StoreProduct}>()\r\n  )"
                },
                {
                    "name": "productUpdateFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n    PRODUCT_UPDATE_FAILURE\r\n  )"
                },
                {
                    "name": "productUpdateSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/store/products/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n    PRODUCT_UPDATE_SUCCESS\r\n  )"
                }
            ]
        },
        "groupedFunctions": {
            "src/stories/ProductOperations.stories.ts": [
                {
                    "name": "getMockFormGroup",
                    "file": "src/stories/ProductOperations.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": []
                },
                {
                    "name": "getMockUpdateFormGroup",
                    "file": "src/stories/ProductOperations.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": []
                },
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/stories/ProductOperations.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/stories/Card.stories.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/stories/Card.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/stories/Header.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/auth/auth.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/auth/auth.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/products/products.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/products/products.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/store/auth/auth.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/shared/store/auth/auth.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/store/products/product.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/shared/store/products/product.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/registration/registration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegistrationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/products/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/products/product-operations/product-operations.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductOperationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/products/products.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/products/products.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/products.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/app.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DARK_THEME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/app.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIGHT_THEME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/app.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCT_ADD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/app.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCT_UPDATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/app.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCT_VIEW",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/app.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mocks/mocks.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppMocks",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductOperationInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrentUser",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/app.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOGIN_ATTEMPT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOGIN_FAILURE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOGIN_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginAttempted",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOGOUT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIGNUP_ATTEMPT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIGNUP_FAILURE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIGNUP_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signupFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signupSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginCompleteReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/auth/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCT_ADD_ATTEMPT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCT_ADD_FAILURE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCT_ADD_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCT_DELETE_ATTEMPT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCT_DELETE_FAILURE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCT_DELETE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCT_FETCH_ATTEMPT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCT_FETCH_FAILURE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCT_FETCH_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCT_UPDATE_ATTEMPT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCT_UPDATE_FAILURE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCT_UPDATE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productAddAttempted",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productAddSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productDeleteAttempt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productDeleteSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productFetchAttempt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productFetchSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productUpdateAttempt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productUpdateFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productUpdateSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductEffects",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductsState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/product.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/store/products/products.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StoreProduct",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/styles/themes/theme.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Theme",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/styles/themes/theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/styles/themes/theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/urls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HOST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/urls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOGIN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/urls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/urls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REGISTER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/button.ts",
                "type": "class",
                "linktype": "classe",
                "name": "storeButton",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/components/form-button.ts",
                "type": "class",
                "linktype": "classe",
                "name": "storeFormButton",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/jest-config/globalmocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Card.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nonOwner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "owner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ProductOperations.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getMockFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ProductOperations.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getMockUpdateFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ProductOperations.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ProductOperations.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ProductOperations.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ProductOperations.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ProductOperations.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mocks.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StorybookMocks",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/product-operations.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductOperationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}